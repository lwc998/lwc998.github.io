import{_ as s,c as a,a as e,o as t}from"./app-CPX2Gx2F.js";const p={};function l(i,n){return t(),a("div",null,n[0]||(n[0]=[e(`<h1 id="vue-router" tabindex="-1"><a class="header-anchor" href="#vue-router"><span>vue-router</span></a></h1><h3 id="单页路由" tabindex="-1"><a class="header-anchor" href="#单页路由"><span>单页路由</span></a></h3><ul><li><ol><li>标签跳转实现单页内多个模块切换 =&gt; 单页内多前端文件的管理</li></ol></li><li><ol start="2"><li>单页内管理多个模块之间有序切换和传参 =&gt; 前端的数据管理流</li></ol></li></ul><h3 id="使用-vue-router" tabindex="-1"><a class="header-anchor" href="#使用-vue-router"><span>使用 vue-router</span></a></h3><ol><li>引入</li><li>导入 vue 实例，router 插件应用</li><li>实例化</li></ol><h3 id="路由切换" tabindex="-1"><a class="header-anchor" href="#路由切换"><span>路由切换</span></a></h3><h4 id="单页路由切换的实质" tabindex="-1"><a class="header-anchor" href="#单页路由切换的实质"><span>单页路由切换的实质</span></a></h4><ul><li><ol><li>更新视图但是不重新请求页面</li></ol></li><li><ol start="2"><li>路由改变但不触发重新加载的方式 =&gt; hash history</li></ol></li></ul><h5 id="hash-模式" tabindex="-1"><a class="header-anchor" href="#hash-模式"><span>hash 模式</span></a></h5><p>#锚点使用</p><p>核心 =&gt; hash 值在路径中发生改变不会触发网页的重新加载 / hash 值的改变又会改变浏览器的历史记录 / hash 值的改变可监听的 window.onhashchange()</p><h5 id="history-模式" tabindex="-1"><a class="header-anchor" href="#history-模式"><span>history 模式</span></a></h5><p>核心 =&gt; history.pushState() history.replaceState() / history 模式可以改变浏览器的历史记录 / history 的改变触发 window.onpopstate()</p><h3 id="路由守卫" tabindex="-1"><a class="header-anchor" href="#路由守卫"><span>路由守卫</span></a></h3><h4 id="全局守卫" tabindex="-1"><a class="header-anchor" href="#全局守卫"><span>全局守卫</span></a></h4><ul><li><ol><li>全局前置守卫 =&gt; router.beforeEach()</li></ol></li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><ol start="2"><li>全局后置守卫 =&gt; router.afterEach()</li></ol></li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">router<span class="token punctuation">.</span><span class="token function">afterEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> failure</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>failure<span class="token punctuation">)</span> <span class="token function">sendToAnalytics</span><span class="token punctuation">(</span>to<span class="token punctuation">.</span>fullPath<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><ol start="3"><li>全局解析守卫 =&gt; router.beforeResolve() 每次导航时都会触发，不同的是，解析守卫刚好会在导航被确认之前、所有组件内守卫和异步路由组件被解析之后调用。</li></ol></li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">router<span class="token punctuation">.</span><span class="token function">beforeResolve</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">to</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="路由独享守卫" tabindex="-1"><a class="header-anchor" href="#路由独享守卫"><span>路由独享守卫</span></a></h4><ul><li><ol><li>路由独享守卫 =&gt; beforeEnter()</li></ol></li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&quot;/users/:id&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">component</span><span class="token operator">:</span> UserDetails<span class="token punctuation">,</span></span>
<span class="line">    <span class="token function-variable function">beforeEnter</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> <span class="token keyword">from</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// reject the navigation</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="组件内的守卫" tabindex="-1"><a class="header-anchor" href="#组件内的守卫"><span>组件内的守卫</span></a></h4><ul><li><ol><li>前置守卫 =&gt; beforeRouteEnter()</li></ol></li><li><ol start="2"><li>更新守卫 =&gt; beforeRouteUpdate()</li></ol></li><li><ol start="3"><li>离开守卫 =&gt; beforeRouteLeave()</li></ol></li></ul><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>
<span class="line">  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">beforeRouteEnter</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// 在渲染该组件的对应路由被验证前调用</span></span>
<span class="line">      <span class="token comment">// 不能获取组件实例 \`this\` ！</span></span>
<span class="line">      <span class="token comment">// 因为当守卫执行时，组件实例还没被创建！</span></span>
<span class="line">      <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">vm</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 通过 \`vm\` 访问组件实例</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function">beforeRouteUpdate</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> <span class="token keyword">from</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// 在当前路由改变，但是该组件被复用时调用</span></span>
<span class="line">      <span class="token comment">// 举例来说，对于一个带有动态参数的路径 \`/users/:id\`，在 \`/users/1\` 和 \`/users/2\` 之间跳转的时候，</span></span>
<span class="line">      <span class="token comment">// 由于会渲染同样的 \`UserDetails\` 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。</span></span>
<span class="line">      <span class="token comment">// 因为在这种情况发生的时候，组件已经挂载好了，导航守卫可以访问组件实例 \`this\`</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function">beforeRouteLeave</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> <span class="token keyword">from</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// 在导航离开渲染该组件的对应路由时调用</span></span>
<span class="line">      <span class="token comment">// 与 \`beforeRouteUpdate\` 一样，它可以访问组件实例 \`this\`</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="完整的导航解析流程" tabindex="-1"><a class="header-anchor" href="#完整的导航解析流程"><span>完整的导航解析流程</span></a></h4><ol><li>导航被触发。</li><li>在失活的组件里调用 <code>beforeRouteLeave</code> 守卫。</li><li>调用全局的 <code>beforeEach</code> 守卫。</li><li>在重用的组件里调用 <code>beforeRouteUpdate</code> 守卫(2.2+)。</li><li>在路由配置里调用 <code>beforeEnter</code>。</li><li>解析异步路由组件。</li><li>在被激活的组件里调用 <code>beforeRouteEnter</code>。</li><li>调用全局的 <code>beforeResolve</code> 守卫(2.5+)。</li><li>导航被确认。</li><li>调用全局的 <code>afterEach</code> 钩子。</li><li>触发 DOM 更新。</li><li>调用 <code>beforeRouteEnter</code> 守卫中传给 <code>next</code> 的回调函数，创建好的组件实例会作为回调函数的参数传入。</li></ol><h3 id="路由懒加载" tabindex="-1"><a class="header-anchor" href="#路由懒加载"><span>路由懒加载</span></a></h3><ul><li><ol><li>懒加载 =&gt; 路由组件的异步加载</li></ol></li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span></span>
<span class="line">  <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">&quot;/Dynamic&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Dynamic&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token comment">// component: Dynamic,</span></span>
<span class="line">    <span class="token comment">// 1. require加载</span></span>
<span class="line">    <span class="token comment">// component: resolve =&gt; (require([&#39;@/components/Dynamic&#39;], resolve))</span></span>
<span class="line">    <span class="token comment">// 2. ES6 加载方式</span></span>
<span class="line">    <span class="token comment">// component: () =&gt; import(&quot;@/components/Dynamic&quot;， dynamic),</span></span>
<span class="line">    <span class="token comment">// 3. webpack require.ensure懒加载</span></span>
<span class="line">    <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span></span>
<span class="line">      require<span class="token punctuation">.</span><span class="token function">ensure</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">r</span><span class="token punctuation">(</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;@/components/Dynamic&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;dynamic&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token comment">// 性能优化 优化首页加载</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,32)]))}const c=s(p,[["render",l],["__file","vue-router.html.vue"]]),u=JSON.parse('{"path":"/page/vue/vue-router.html","title":"vue-router","lang":"zh-CN","frontmatter":{},"headers":[{"level":3,"title":"单页路由","slug":"单页路由","link":"#单页路由","children":[]},{"level":3,"title":"使用 vue-router","slug":"使用-vue-router","link":"#使用-vue-router","children":[]},{"level":3,"title":"路由切换","slug":"路由切换","link":"#路由切换","children":[]},{"level":3,"title":"路由守卫","slug":"路由守卫","link":"#路由守卫","children":[]},{"level":3,"title":"路由懒加载","slug":"路由懒加载","link":"#路由懒加载","children":[]}],"git":{"updatedTime":1740135997000,"contributors":[{"name":"linwuchang","email":"linwuchang@icourt.com","commits":2}]},"filePathRelative":"page/vue/vue-router.md"}');export{c as comp,u as data};
