import{_ as n,c as a,a as e,o as t}from"./app-eGDPg9Ci.js";const p={};function l(i,s){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="vue3-0-基础" tabindex="-1"><a class="header-anchor" href="#vue3-0-基础"><span>vue3.0 基础</span></a></h1><h2 id="_1-响应式基础" tabindex="-1"><a class="header-anchor" href="#_1-响应式基础"><span>1. 响应式基础</span></a></h2><h3 id="reactive-的局限性" tabindex="-1"><a class="header-anchor" href="#reactive-的局限性"><span>reactive()的局限性</span></a></h3><ol><li>有限的值类型：只能用于对象类型，不能用于基本类型数据</li><li>不能替换整个对象：Vue 的响应式跟踪是通过属性访问实现的，需要保持对响应式对象的相同引用</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 上面的 ({ id: 1 }) 引用将不再被追踪</span></span>
<span class="line"><span class="token comment">// (响应性连接已丢失！)</span></span>
<span class="line">state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>对解构操作不友好：将响应式对象的原始类型解构到本地时，或者将该属性传递给函数时，会丢失响应式的连接</li></ol><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 断开连接</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span> id <span class="token punctuation">}</span> <span class="token operator">=</span> state<span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 不会影响state</span></span>
<span class="line">id<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 该函数接收到的是一个普通的数字</span></span>
<span class="line"><span class="token comment">// 并且无法追踪 state.count 的变化</span></span>
<span class="line"><span class="token comment">// 我们必须传入整个对象以保持响应性</span></span>
<span class="line"><span class="token function">fn</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7)]))}const o=n(p,[["render",l],["__file","vue3-basis.html.vue"]]),r=JSON.parse('{"path":"/page/vue/vue3-basis.html","title":"vue3.0 基础","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"1. 响应式基础","slug":"_1-响应式基础","link":"#_1-响应式基础","children":[{"level":3,"title":"reactive()的局限性","slug":"reactive-的局限性","link":"#reactive-的局限性","children":[]}]}],"git":{"updatedTime":1742554823000,"contributors":[{"name":"linwuchang","email":"linwuchang@icourt.com","commits":2}]},"filePathRelative":"page/vue/vue3-basis.md"}');export{o as comp,r as data};
