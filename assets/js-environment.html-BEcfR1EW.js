import{_ as t,c as a,a as n,o as r}from"./app-BIa0kyUY.js";const l={};function i(s,e){return r(),a("div",null,e[0]||(e[0]=[n('<h1 id="js-执行环境" tabindex="-1"><a class="header-anchor" href="#js-执行环境"><span>js 执行环境</span></a></h1><ul><li><p>起因：JavaScript 语言的执行环境为&#39;单线程&#39;，需引入异步编程来解决加载卡死的问题</p></li><li><p>异步编程的方法</p><ul><li><p>回调函数(callback)：缺点容易造成&quot;回调函数地狱&quot;（多重嵌套，多个异步操作形成强耦合，修改一个回调函数可能导致上下层的回调函数都得要修改）</p></li><li><p>Promise 函数：将回调函数的嵌套，改成链式调用。缺点代码冗余，多个 then 导致语义不清</p></li><li><p>Gernerator 函数：可以暂停执行和恢复执行，调用后返回一个指向内部的指针对象（遍历器对象 Iterator Object）,需要通过调用 next 方法</p></li><li><p>async 函数：Gernerator 函数的语法糖，实现原理是将 Generator 函数和自动执行器，包装在一个函数里</p></li></ul></li></ul>',2)]))}const p=t(l,[["render",i],["__file","js-environment.html.vue"]]),c=JSON.parse('{"path":"/page/js/js-environment.html","title":"js 执行环境","lang":"zh-CN","frontmatter":{},"headers":[],"git":{},"filePathRelative":"page/js/js-environment.md"}');export{p as comp,c as data};
